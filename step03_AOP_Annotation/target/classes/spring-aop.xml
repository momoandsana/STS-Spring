<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
<!-- 객체 생성 + 주입 -->
<!-- <bean class="exam.service.MemberServiceImpl" id="target"/>
<bean class="exam.aop.TimerAdvice" id="advice"/>
<bean class="exam.service.BoardService" id="target2"/>
 -->
 <context:component-scan base-package="exam.aop,exam.service"/>
 
<!-- aop 설정 -->
<!-- <aop:config>
	<aop:aspect ref="advice">
	advice 가 공통관심사항
		<aop:around method="around" pointcut="execution(* exam.service.*Impl.*(..))"/>
		<aop:around method="around" pointcut="execution(void exam.service.*Impl.*())"/>		
		 인수 없고 void 형식으로 반환하는 경우
		
		<aop:around method="around" pointcut="execution(* exam.service.*.*(..))"/>
		 인터페이스가 없어도 aop를 적용할 수 있다
	</aop:aspect>
</aop:config> -->

<!-- 자바 베이스 기반으로 @annotation -->
<aop:aspectj-autoproxy/>


</beans>
