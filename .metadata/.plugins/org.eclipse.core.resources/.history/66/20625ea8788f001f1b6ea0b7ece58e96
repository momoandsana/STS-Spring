package sample01;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MainApp {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		MessageBean bean=new MessageBeanEnImpl();
//		bean.sayHello("heejung");
//		
//		bean=new MessageBeanKoImpl();
////		bean.sayHello("희정");
		
		/*
		 * SpringContainer 의 ApplicationContext 를 이용해서 객체 관리
		 * : configuration meta-data 파일이 필요하다(~.xml)
		 * 
		 * : singleton의 형태로 객체를 관리한다
		 *  singleton일 때는 객체를 미리 메모리에 로딩하고 같은 id를
		 *  getBean으로 호출하면 항상 동일한 객체를 가지고 온다
		 *  같을 클래스를 가지고 와도 id 가 다르면 다른거임
		 *  
		 * 만약, bean 설정에서 scope="prototype" 설정하면
		 * 객체를 미리 만들지 않고 필요할때 (getBean) 마다 
		 * 새로운 객체를 생성해준다
		 */
		
		ApplicationContext context=new ClassPathXmlApplicationContext("sample01/applicationContext.xml");
		// applicationContext 가 내용에 따라 객체를 생성해줌
		System.out.println("---------------------------");
		MessageBean bean=context.getBean("en",MessageBean.class); // en은 xml 파일의 id 이름, MessageBean 은 인터페이스
		System.out.println("en bean = "+bean);
		bean.sayHello("haha");
		
		bean=context.getBean("ko",MessageBean.class);
		System.out.println("ko bean = "+bean);
		bean.sayHello("나영");
		
		System.out.println("============================");
		bean=context.getBean("en",MessageBean.class); 
		// 앞에서 얻었던 객체를 똑같이 줌->싱글톤(static)으로 관리하고 있기 때문에, 프로그램 종료하면 같이 소멸
		System.out.println("en bean = "+bean);
		bean.sayHello("jang");
		
		System.out.println("============================");
		bean=context.getBean("en2",MessageBean.class); 
		// 앞에서 얻었던 객체를 똑같이 줌->싱글톤(static)으로 관리하고 있기 때문에, 프로그램 종료하면 같이 소멸
		System.out.println("en2 bean = "+bean);
		bean.sayHello("jang2");
	}

}
